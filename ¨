package linkedlist

type LinkedList[T any] struct {
	root *node[T]
}

type node[T any] struct {
	value any
	next  *node[T]
}

func (l *LinkedList[T]) Init() *LinkedList[T] {
	rootNode := node[T]{value: nil, next: nil}
	return &LinkedList[T]{root: &rootNode}
}

func New[T any]() *LinkedList[T] {
	return new(LinkedList[T]).Init()
}

// Methods

// add(E element) - Adds an element at the end of the list
func (l *LinkedList[T]) Add(element any) {
	newNode := node[T]{value: element, next: nil}
	node := l.root
	hasNext := true
	for hasNext {
		if node.next != nil {
			node = node.next
		} else {
			hasNext = false
		}
	}
	node.next = &newNode
}

// addAtIndex (int index, E element)
// get(int index)
func (l LinkedList[T]) get(int index) T {

	if l.root.next != nil {
		counter := 0
		node := l.root.next
		hasNext := true
		for hasNext {
			node.ne

		}

	}
}

// set(int index, E element) - Replaces the element tat the specified poistion with the specifeid element
// removeFirst()
// removeLast()
// getFirst()
// getLast()
// remove(int index) - Removes the element at the specified index
// remove(Object o) - Removes the first occurrence of the specified element
// peek() - Retrieves, but does not remove, the head of the list, or teturns null if the list is empty

// Traversal Method

// traverse()

// Search

// search(value)

// Update Method

// updateAtIndex(int index,E element)

//Utility Methods

// contains(Object o) - Returns true if the list contains the specified element.
// clear() - Removes all elements from the list.
// size() - Returns the number of elements in the list.
// indexOf(Object o)- Returns the index of the first occurence of the speciefied element
// isEmpty()
// reverse()
// lastIndexOf(Object o) - Returns the index of the last occurrence of the specified element

func hasNext(node node[T]) bool {

}
